<%- include('../components/admin_template') %>
<main id="content">
  <div class="bg-transparent">
    <div class="sm:flex sm:items-center px-8 pt-4">
        <div class="sm:flex-auto">
          <h1 class="text-base font-medium leading-6 text-white mb-4 heavy"><%= req.translations.instances %></h1>
        </div>
    </div>
    <div id="nodeTable" class="mt-6 w-full">
      <div class="px-6 py-3 mt-6 grid grid-cols-12 gap-4 flex flex-col items-center text-sm font-medium text-white/50" id="nodeTable">
        <div class="col-span-2"><%= req.translations.name %></div>
        <div class="col-span-2"><%= req.translations.node %></div>
        <div class="col-span-2">State</div>
        <div class="col-span-2"><%= req.translations.volumeANDMount %></div>
        <div class="col-span-2"><%= req.translations.actions %></div>
        <div class="flex items-center gap-3"> <!-- Moved button and server list directly under "Instances" -->
          <!-- Button -->
          <% if (req.user.admin === true) { %>
             <!-- New Server Button -->
    <button 
      id="createButton"
      class="hover:scale-95 flex items-center justify-center h-11 gap-2 px-5 text-sm font-medium text-white transition-all duration-200 rounded-full shadow bg-indigo-500 hover:bg-indigo-700 focus:ring-2 focus:ring-indigo-800 focus:ring-offset-2 ring-offset-gray-200 hover:shadow-none"
    >
      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" class="size-4">
        <path stroke-linecap="round" stroke-linejoin="round" d="M12 4.5v15m7.5-7.5h-15" />
      </svg>
      <span>Create</span>
    </button>
 </div>
      </div>
         <script>
            function createvmbutton() {
                window.location.href = '../admin/new/rd'
            }
         </script>
          <% } %>
        <tbody class="divide-y divide-white/5">
          <% instances.forEach(function(instance) { %>
            <div class="server-row mb-4 bg-white/5 rounded-2xl hover:bg-white/10 border-2 border-dashed border-transparent hover:border-white/5 transition px-6 py-4 grid grid-cols-12 gap-4 items-center cursor-pointer">
              
              <!-- Server Name & Node -->
              <div class="col-span-2">
                  <div class="font-medium text-white"><%= instance.Name %></div>
              </div>

              <div class="col-span-2">
                <div class="flex items-center gap-2">
                    <span data-status class="text-xs"><%= instance.Node.name %></span>
                </div>
            </div>
            
          

              <div class="col-span-2">
                <div class="flex  items-center gap-2">
                <div class="font-light text-white"><%= instance.State %></div>
                </div>  
            </div>

              <div class="col-span-2">
                <div class="flex items-center gap-2">
                    <span data-status class="text-xs">/volumes/<%= instance.VolumeId %></span>
                </div>
            </div>
            <% if (instance.suspended === true) { %>
              <form action="/admin/instances/unsuspend/<%= instance.Id %>" method="POST">
              <button class="bg-white hover:bg-white text-black font-medium py-1 px-4 rounded-full text-sm hover:scale-95"><%= req.translations.unsuspend %></button>
            </form>
            <% } else { %>
              <form action="/admin/instances/suspend/<%= instance.Id %>" method="POST">
                <button class="bg-white hover:bg-white text-black font-medium py-1 px-4 rounded-full text-sm hover:scale-95"><%= req.translations.suspend %></button>
              </form>
              <% } %> 
              <button onclick="location.href='/admin/instances/<%= instance.Id %>/edit'" class="bg-white hover:bg-white text-black font-medium py-1 px-4 rounded-full text-sm hover:scale-95"><%= req.translations.edit %></button>
              <button onclick="location.href='/admin/instance/delete/<%= instance.Id %>'" class="bg-red-600 hover:bg-red-700 text-white font-medium py-1 px-4 rounded-full text-sm hover:scale-95">Remove</button>

          </div>
            <% }); %>
            
    </div>
    <div id="nodeForm" class="hidden flex flex-col gap-4 mt-6 px-8 w-full">
      <div class="p-3 bg-transparent shadow-xl rounded-xl overflow-hidden sm:p-6 lg:p-10 card" style="width: 800px;">
          <form>
              <div class="grid grid-cols-2 gap-4">
                  <div>
                      <label class="text-white text-sm tracking-tight mb-2"><%= req.translations.name %>:</label>
                      <input id="name" class="flex-grow p-2 w-full bg-white/10 border border-white/10 focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 text-white rounded-lg placeholder-gray-400" placeholder="My instance">
                  </div>
                  <div>
                      <label class="text-white text-sm tracking-tight mb-2"><%= req.translations.user %>:</label>
                      <select id="user" class="flex-grow p-2 w-full bg-white/10 border border-white/10 focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 text-white rounded-lg placeholder-gray-400">
                          <% users.forEach(function(user) { %>
                              <option value="<%= user.userId %>" class="text-neutral-800 text-sm tracking-tight mb-2"><%= user.username %></option>
                          <% }); %>
                      </select>
                  </div>
                  <div>
                      <label class="text-white text-sm tracking-tight mb-2"><%= req.translations.image %>:</label>
                      <select id="image" class="flex-grow p-2 w-full bg-white/10 border border-white/10 focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 text-white rounded-lg placeholder-gray-400">
                          <% images.forEach(function(image) { %>
                              <option value="<%= image.Image %>" class="text-neutral-800 text-sm tracking-tight mb-2" data-configfilepath="<%= image.ConfigFilePath %>" data-imagename="<%= image.Name %>" data-configfilecontent="<%= image.ConfigFileContent %>" data-variables="<%= JSON.stringify(image.Variables) %>"><%= image.Name %> (<%= image.Image %>)</option>
                          <% }); %>
                      </select>
                  </div>
                  <div>
                      <label class="text-white text-sm tracking-tight mb-2"><%= req.translations.node %>:</label>
                      <select id="node" class="flex-grow p-2 w-full bg-white/10 border border-white/10 focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 text-white rounded-lg placeholder-gray-400">
                          <% nodes.forEach(function(node) { %>
                              <option value="<%= node.id %>" class="text-neutral-800 text-sm tracking-tight mb-2"><%= node.name %></option>
                          <% }); %>
                      </select>
                  </div>
                  <div>
                      <label class="text-white text-sm tracking-tight mb-2"><%= req.translations.memory %> (MiB):</label>
                      <input id="memory" class="flex-grow p-2 w-full bg-white/10 border border-white/10 focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 text-white rounded-lg placeholder-gray-400" placeholder="2048">
                  </div>
                  <div>
                    <label class="text-white text-sm tracking-tight mb-2">Disk (GB):</label>
                    <input id="disk" class="flex-grow p-2 w-full bg-white/10 border border-white/10 focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 text-white rounded-lg placeholder-gray-400" placeholder="10">
                </div>
                  <div>
                      <label class="text-white text-sm tracking-tight mb-2"><%= req.translations.cpuThreads %>:</label>
                      <input id="cpu" class="flex-grow p-2 w-full bg-white/10 border border-white/10 focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 text-white rounded-lg placeholder-gray-400" placeholder="1">
                  </div>
                  <div>
                      <label class="text-white text-sm tracking-tight mb-2"><%= req.translations.ports %>:</label>
                      <input id="ports" class="flex-grow p-2 w-full bg-white/10 border border-white/10 focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 text-white rounded-lg placeholder-gray-400" placeholder="25565:25565,8080:8080">
                  </div>
                  <div>
                      <label class="text-white text-sm tracking-tight mb-2"><%= req.translations.primaryPort %>:</label>
                      <input id="primary" class="flex-grow p-2 w-full bg-white/10 border border-white/10 focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 text-white rounded-lg placeholder-gray-400" placeholder="25565">
                  </div>
              </div>
              <div class="mt-4">
                  <button id="createNodeBtn" type="button" class="w-32 flex items-center justify-center gap-2 bg-indigo-600 hover:bg-indigo-700 text-white font-semibold py-2 px-3 rounded-lg transition duration-300">
                      <%= req.translations.create %>
                  </button>

              </div>
          </form>
      </div>
      
      <div id="secondCard" class="p-3 bg-transparent shadow-xl rounded-xl overflow-hidden sm:p-6 lg:p-10 card hidden" style="width: 800px;">
        <form id="variablesForm">
           
        </form>
    </div>
  </div>
  


  
</main>
<script>
document.getElementById('image').addEventListener('change', function(event) {
    var selectedOption = event.target.options[event.target.selectedIndex];
    var variables = selectedOption.getAttribute('data-variables');
    var secondCard = document.getElementById('secondCard');
    var variablesForm = document.getElementById('variablesForm');

    if (variables) {
        secondCard.classList.remove('hidden');
        variablesForm.innerHTML = '';
        variables = JSON.parse(variables);

        for (var key in variables) {
            if (variables.hasOwnProperty(key)) {
                var variable = variables[key];
                var fieldHtml = '';

                if (variable.type === 'text') {
                    fieldHtml = `
                        <div>
                            <label class="text-white text-sm tracking-tight mb-2">${key}:</label>
                            <input type="text" name="${key}" value="${variable.default || ''}" class="flex-grow p-2 w-full bg-white/10 border border-white/10 focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 text-white rounded-lg placeholder-gray-400 " ${variable.required ? 'required' : ''}>
                        </div>
                    `;
                }

                variablesForm.insertAdjacentHTML('beforeend', fieldHtml);
            }
        }
    } else {
        secondCard.classList.add('hidden');
    }
});
</script>
<script>
document.getElementById('createButton').addEventListener('click', function() {
  var table = document.getElementById('nodeTable');
  var form = document.getElementById('nodeForm');
  if (table.style.display !== 'none') {
    table.style.display = 'none';
    form.style.display = 'flex';
  } else {
    table.style.display = 'flex';
    form.style.display = 'none';
  }

  const elem  = document.getElementById('image');
  elem.selectedIndex = 0;
  const event = new Event('change', {
    bubbles: true,
    cancelable: true
  });
  elem.dispatchEvent(event);

});

document.getElementById('image').addEventListener('change', function() {
  const selectedOption = this.options[this.selectedIndex];
  const cmd = selectedOption.getAttribute('data-cmd');
  const env = JSON.parse(selectedOption.getAttribute('data-env') || '{}');
});
</script>
<script>
    document.getElementById('createRDButton').addEventListener('click', function() {
        var table = document.getElementById('nodeTable');
      var form = document.getElementById('RDPForm');
      if (table.style.display !== 'none') {
        table.style.display = 'none';
        form.style.display = 'flex';
      } else {
        table.style.display = 'flex';
        form.style.display = 'none';
      }
      form.classList.remove('hidden');
    
      const elem  = document.getElementById('image');
      elem.selectedIndex = 0;
      const event = new Event('change', {
        bubbles: true,
        cancelable: true
      });
      elem.dispatchEvent(event);
    
    });
    
    </script>
<script>
document.getElementById('createNodeBtn').addEventListener('click', async function() {
  const createBtn = this;
  createBtn.textContent = 'Working on it...';
  createBtn.disabled = true;

  const name = document.getElementById('name');
  const memory = document.getElementById('memory');
  const disk = document.getElementById('disk');
  const cpu = document.getElementById('cpu');
  const ports = document.getElementById('ports');
  const imageDropdown = document.getElementById('image');
  const primaryPort = document.getElementById('primary');
  const selectedImage = imageDropdown.options[imageDropdown.selectedIndex];
  const configFilePath = selectedImage.getAttribute('data-configfilepath');
  let configFileContent = selectedImage.getAttribute('data-configfilecontent');
  const variablesForm = document.getElementById('variablesForm');
  
  const inputs = variablesForm.querySelectorAll('div > input');
  const variables = Array.from(inputs).reduce((acc, input) => {
      if (input.name) {
          acc[input.name] = input.value;
      }
      return acc;
  }, {});

  clearValidationErrors();

  let isValid = true;

  if (name.value.includes(' ')) {
      showError(name, 'Name must not contain spaces.');
      isValid = false;
  }

  if (!isPositiveInteger(memory.value)) {
      showError(memory, 'Memory must be an integer greater than 1.');
      isValid = false;
  }

  if (!isPositiveIntegerCpu(cpu.value)) {
      showError(cpu, 'CPU must be an integer greater than 0.');
      isValid = false;
  }

  const portPattern = /^(\d+:\d+)(,\d+:\d+)*$/;
  if (!ports.value.match(portPattern)) {
      showError(ports, 'Ports must be in the format "port:port,port:port".');
      isValid = false;
  }

  if (!primaryPort.value.match(/^\d+$/)) {
      showError(primaryPort, 'Primary port must be a valid number.');
      isValid = false;
  } else {
      configFileContent = configFileContent.replace('{{primaryPort}}', primaryPort.value);
  }

  if (!isValid) {
      createBtn.textContent = 'Create';
      createBtn.disabled = false;
      return;
  }

  const nodeData = {
      name: name.value,
      image: imageDropdown.value,
      imagename: selectedImage.getAttribute('data-imagename'),
      nodeId: document.getElementById('node').value,
      user: document.getElementById('user').value,
      memory: memory.value,
      disk: disk.value,
      cpu: cpu.value,
      ports: ports.value,
      primary: primaryPort.value,
      configFilePath: configFilePath,
      configFileContent: configFileContent,
      variables: JSON.stringify(variables)
  };

  await sendData(nodeData, createBtn);
});

function clearValidationErrors() {
  const inputs = document.querySelectorAll('.input-error');
  const messages = document.querySelectorAll('.error-message');
  inputs.forEach(input => input.classList.remove('input-error'));
  messages.forEach(msg => msg.remove());
}

function serializeParams(params) {
  return Object.keys(params)
      .map(key => encodeURIComponent(key) + '=' + encodeURIComponent(params[key]))
      .join('&');
  }
  
function showError(element, message) {
  element.classList.add('input-error');
  const errorDiv = document.createElement('div');
  errorDiv.textContent = message;
  errorDiv.className = 'error-message';
  element.parentNode.insertBefore(errorDiv, element.nextSibling);
}

function isPositiveInteger(value) {
  const num = parseInt(value, 10);
  return Number.isInteger(num) && num > 1;
}

function isPositiveIntegerCpu(value) {
  const num = parseInt(value, 10);
  return Number.isInteger(num) && num > 0;
}

function sendData(nodeData, createBtn) {
  const baseUrl = '/instances/deploy';
  const queryParams = serializeParams(nodeData);
  const fullUrl = `${baseUrl}?${queryParams}`;

  fetch(fullUrl, {
      method: 'GET',
      headers: {
          'Content-Type': 'application/json'
      }
  })
  .then(response => {
      if (response.ok) {
          return response.json();
      } else {
          throw new Error('Failed to create instance');
      }
  })
  .then(data => {
window.location.href = '../admin/instances?err=CREATED'
      console.log('Instance created:', data);
      createBtn.textContent = 'Create';
      createBtn.disabled = false;
  })
  .catch(error => {
      console.error('Error creating instance:', error);
      alert('Error! Instance creation failed. Check the console for more details.');
      createBtn.textContent = 'Create';
      createBtn.disabled = false;
  });
}

function handleResponse(response) {
  if (response.ok) {
      return response.json();
  }
  throw new Error('Failed to create instance');
}

function handleError(error) {
  console.error('Error creating instance:', error);
  alert('Error! Check the console for more details.');
  createBtn.textContent = 'Create';
  createBtn.disabled = false;
}
</script>

<%- include('../components/footer') %>
